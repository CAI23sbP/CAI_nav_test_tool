<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- changing the robot model here will load the robot with different configurations -->
    <arg name="robot_namespace" />

    <arg name="robot" default="cob4-11"/>

    <node name="odom_pub" pkg="gazebo_utils" type="odom.py" args="$(arg robot_namespace)" />

    <node pkg="topic_tools" type="relay" name="cmd_vel_relay" args="cmd_vel twist_controller/command" />

    <!-- configering the lasers	 -->
    <rosparam command="load" ns="/script_server/base" file="$(find simulation-setup)/robot/cob4/base_configurations.yaml"/>
    <rosparam ns="base_laser_front" command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/base_laser_front.yaml"/>
    <rosparam ns="base_laser_right" command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/base_laser_right.yaml"/>
    <rosparam ns="base_laser_left" command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/base_laser_left.yaml"/>

    <rosparam ns="base_laser_front" command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/base_laser_front.yaml"/>
    <node ns="base_laser_front" pkg="cob_sick_s300" type="cob_scan_filter" name="scan_filter" respawn="false" output="screen">
        <remap from="scan_in" to="scan_raw"/>
        <remap from="scan_out" to="scan"/>
    </node>

    <rosparam ns="base_laser_right" command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/base_laser_right.yaml"/>
    <node ns="base_laser_right" pkg="cob_sick_s300" type="cob_scan_filter" name="scan_filter" respawn="false" output="screen">
        <remap from="scan_in" to="scan_raw"/>
        <remap from="scan_out" to="scan"/>
    </node>

    <rosparam ns="base_laser_left" command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/base_laser_left.yaml"/>
    <node ns="base_laser_left" pkg="cob_sick_s300" type="cob_scan_filter" name="scan_filter" respawn="false" output="screen">
        <remap from="scan_in" to="scan_raw"/>
        <remap from="scan_out" to="scan"/>
    </node>


    <!-- run scan unifier -->
    <arg name="input_scans" value="['$(arg robot_namespace)/base_laser_front/scan', '$(arg robot_namespace)/base_laser_left/scan', '$(arg robot_namespace)/base_laser_right/scan']"/>
    <node pkg="cob_scan_unifier" type="scan_unifier_node" name="cob_scan_unifier" output="log">
        <rosparam subst_value="True" param="input_scans">$(arg input_scans)</rosparam>
        <remap from="scan_unified" to="$(arg robot_namespace)/scan_unified"/>
        <param name="frame" value="$(arg robot_namespace)/base_link"/>

    </node>







    <rosparam command="load" file="$(find simulation-setup)/robot/cob4/robots/cob4/config/cob4_base_controller.yaml"/>
    <node pkg="controller_manager" type="controller_manager" name="base_controller_spawner" args="spawn joint_state_controller twist_controller" respawn="false" output="screen"/>


    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" output="screen">
        <remap from="joint_states" to="$(arg robot_namespace)/joint_states"/>
        <rosparam command="load" file="$(find simulation-setup)/robot/cob4/robots/$(arg robot)/config/joint_state_publisher.yaml"/>
    </node>

    <!-- TODO: MAYBE SOLVE WITH https://answers.ros.org/question/104111/how-to-publish-transform-from-odom-to-base_link/ -->
    <!-- <arg name="global_frame_id" value="base_link"/>
	<arg name="odom_frame_id" value="map"/>
	<node pkg="tf2_ros" type="static_transform_publisher" name="test_to_odom_tfpublisher" args="0 0 0 0 0 0 $(arg global_frame_id) $(arg odom_frame_id)">
	</node> -->
    <!-- 
NOTE: The robot has several functionalities which could enhance our repo, but are for performance resons not implemented:
(all these can be startet, here: https://github.com/ipa320/cob_robots/blob/kinetic_dev/cob_bringup/robots/cob4-4.xml    )
- stuck_detector : https://github.com/ipa320/cob_robots/blob/kinetic_dev/cob_bringup/components/ros_control_base.launch
- fake_driver: https://github.com/ipa320/cob_command_tools/blob/8fe6c368d573c26cf62a59afc859a73edee8844b/cob_helper_tools/scripts/fake_driver.py
- velocity smoother : https://github.com/ipa320/cob_control/tree/c652fcc2ce3f885216631697916735e53b1285af/cob_base_velocity_smoother
& see here for explenation: https://github.com/ipa320/cob_control/blob/c652fcc2ce3f885216631697916735e53b1285af/cob_base_velocity_smoother/src/cob_base_velocity_smoother.cpp#L21
- diagnostic_aggregator: https://github.com/ipa320/cob_robots/blob/kinetic_dev/cob_bringup/tools/diagnostics_aggregator.launch
& http://wiki.ros.org/diagnostic_aggregator
(with: https://github.com/ipa320/cob_command_tools/blob/8fe6c368d573c26cf62a59afc859a73edee8844b/cob_dashboard/scripts/cob_dashboard_aggregator.py)
- fake diagnostic: https://github.com/ipa320/cob_command_tools/blob/8fe6c368d573c26cf62a59afc859a73edee8844b/cob_helper_tools/scripts/fake_diagnostics.py
- base_collision_observer, from : https://github.com/ipa320/cob_robots/blob/kinetic_dev/cob_bringup/robots/cob4-11.xml
- emergency_stop_monitor, from : https://github.com/ipa320/cob_robots/blob/kinetic_dev/cob_bringup/robots/cob4-11.xml

-->
</launch>